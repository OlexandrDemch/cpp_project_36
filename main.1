#include <iostream>
#include <stack>
#include <unordered_map>

bool checkBrackets(const std::string& inputString) {
    std::stack<std::pair<char, int>> bracketStack;
    std::unordered_map<char, char> closingToOpening = {{')', '('}, {']', '['}, {'}', '{'}};

    for (int i = 0; i < inputString.length(); ++i) {
        char currentChar = inputString[i];
        if (currentChar == '(' || currentChar == '[' || currentChar == '{') {
            bracketStack.push(std::make_pair(currentChar, i + 1));
        } else if (currentChar == ')' || currentChar == ']' || currentChar == '}') {
            if (bracketStack.empty() || bracketStack.top().first != closingToOpening[currentChar]) {
                std::cout << "Неправильне розташування дужок на позиції " << i + 1 << ": " << inputString.substr(0, i + 1) << std::endl;
                return false;
            }
            bracketStack.pop();
        }
    }

    if (!bracketStack.empty()) {
        std::cout << "Неправильне розташування дужок на позиції " << bracketStack.top().second << ": " << inputString.substr(0, bracketStack.top().second) << std::endl;
        return false;
    }

    std::cout << "Рядок містить коректне розташування дужок." << std::endl;
    return true;
}

int main() {
    std::string correctString = "({x-y-z} * [x + 2y] - (z + 4x)).";
    std::string incorrectString = "([x-y-z} * [x + 2y) - {z + 4x)].";

    checkBrackets(correctString);
    checkBrackets(incorrectString);

    return 0;
}
